[{"content":"Headings 1 2 3 4 5 6 # Heading level 1 ## Heading level 2 ### Heading level 3 #### Heading level 4 ##### Heading level 5 ###### Heading level 6 Emphasis Bold I just love **bold text**.\nI just love bold text.\nI just love __bold text__.\nI just love bold text.\nItalic Italicized text is the *cat's meow*.\nItalicized text is the cat\u0026rsquo;s meow.\nItalicized text is the _cat's meow_.\nItalicized text is the cat\u0026rsquo;s meow.\nBold and Italic Add three asterisks before and after a word or phrase to emphasize text with bold and italics at the same time.\nThis text is ***really important***.\nThis text is really important.\nBlockquotes Blockquotes with Single Paragraph \u0026gt; Dorothy followed her through many of the beautiful rooms in her castle.\\\nDorothy followed her through many of the beautiful rooms in her castle.\nBlockquotes with Multiple Paragraphs 1 2 3 \u0026gt; Dorothy followed her through many of the beautiful rooms in her castle. \u0026gt; \u0026gt; The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood. Dorothy followed her through many of the beautiful rooms in her castle.\nThe Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\nBlockquotes with Other Elements 1 2 3 4 5 6 \u0026gt; #### The quarterly results look great! \u0026gt; \u0026gt; - Revenue was off the chart. \u0026gt; - Profits were higher than ever. \u0026gt; \u0026gt; *Everything* is going according to **plan**. Revenue was off the chart. Profits were higher than ever. Everything is going according to plan.\nLists Ordered Lists 1 2 3 4 1. First item 2. Second item 3. Third item 4. Fourth item First item Second item Third item Fourth item 1 2 3 4 4. First item 2. Second item 3. Third item 4. Fourth item First item Second item Third item Fourth item 1 2 3 4 5 6 1. First item 2. Second item 3. Third item 1. Indented item 2. Indented item 4. Fourth item First item Second item Third item Indented item Indented item Fourth item Unordered Lists 1 2 3 4 - First item - Second item - Third item - Fourth item First item Second item Third item Fourth item 1 2 3 4 5 6 - First item - Second item - Third item 1. Indented item 2. Indented item - Fourth item First item Second item Third item Indented item Indented item Fourth item Code To denote a word or phrase as code, enclose it in backticks(`).\n``At the command prompt, type `nano`.``\nAt the command prompt, type `nano`.\nHorizontal Rules To create a horizontal rule, use three or more dashes (\u0026mdash;) on a line by themselves.\nPut blank lines before and after horizontal rules.\nLinks To create a link, enclose the link text in brackets (e.g., [Duck Duck Go]) and then follow it immediately with the URL in parentheses (e.g., (https://duckduckgo.com)).\nMy favorite search engine is [Duck Duck Go](https://duckduckgo.com).\nMy favorite search engine is Duck Duck Go.\nAdding Titles You can optionally add a title for a link. This will appear as a tooltip when the user hovers over the link. To add a title, enclose it in quotation marks after the URL.\nMy favorite search engine is [Duck Duck Go](https://duckduckgo.com \u0026quot;The best search engine for privacy\u0026quot;).\nMy favorite search engine is Duck Duck Go.\nURLs and Email Addresses To quickly turn a URL or email address into a link, enclose it in angle brackets.\n1 2 \u0026lt;https://www.markdownguide.org\u0026gt; \u0026lt;fake@example.com\u0026gt; https://www.markdownguide.org\nfake@example.com\nFormatting Links To emphasize links, add asterisks before and after the brackets and parentheses. To denote links as code, add backticks in the brackets.\n1 2 3 I love supporting the **[EFF](https://eff.org)**. This is the *[Markdown Guide](https://www.markdownguide.org)*. See the section on [`code`](#code). I love supporting the EFF.\nThis is the Markdown Guide.\nSee the section on code.\nReference-style Links 1 2 3 4 5 In a hole in the ground there lived a hobbit. Not a nasty, dirty, wet hole, filled with the ends of worms and an oozy smell, nor yet a dry, bare, sandy hole with nothing in it to sit down on or to eat: it was a [hobbit-hole][1], and that means comfort. [1]: \u0026lt;https://en.wikipedia.org/wiki/Hobbit#Lifestyle\u0026gt; \u0026#34;Hobbit lifestyles\u0026#34; In a hole in the ground there lived a hobbit. Not a nasty, dirty, wet hole, filled with the ends of worms and an oozy smell, nor yet a dry, bare, sandy hole with nothing in it to sit down on or to eat: it was a hobbit-hole, and that means comfort.\nImages ![Rick \u0026amp; Morty is awesome!](1.jpg \u0026quot;The portal is awesome\u0026quot;)\nEscaping Characters \\* Without the backslash, this would be a bullet in an unordered list.\n* Without the backslash, this would be a bullet in an unordered list.\nSome rules Always put a space between the number signs and the heading name. Put blank lines before and after a heading. Use a blank line to separate one or more lines of text. Don\u0026rsquo;t indent paragraphs with spaces or tabs. To create a line break or new line (\u0026lt;br\u0026gt;), end a line with two or more spaces, or a backslash(\\) and then type return. Put blank lines before and after blockquotes. References Markdown Guide. ","date":"2022-12-10T15:33:37+08:00","permalink":"https://www.loph.tk/p/markdown-overview/","title":"Markdown Overview"},{"content":"Now locate at the root directory of your blog site, in my case which is: ~/Repo/MyBlog\nCreate new category Name rule Before create new post, you\u0026rsquo;d better create a new category for the post(if haven\u0026rsquo;t), so you can index the post easily, the category file(_index.md) is located at content/categories/{category name}.\nI\u0026rsquo;d like to name the category with a specific rule:\nFor title field in _index.md: Each letter with a uppercase, split with space. For {category name} of directory name: Each letter with a lowercase, connect with -. And the category name below should keep the same term, the only difference should be initial case and delimiter between letters.\ntitle field in _index.md of categories should be consistent with categories field in index.md of your post. content/categories/{category name} and content/post/{category name}. Command 1 hugo new categories/{categories name}/\\_index.md Create new post Before you creare a new post, you should determine two items about your post down.\ncategory name: Which category your post belong to. title name: The title of your post. After you determine those things above, you can run command below to create a new post. The post will be created at content/post/{category name}/{title name} directory.\n1 hugo new post/{category name}/{title name}/index.md or command below:\nnote: {final title name} can override the {title name}\n1 hugo new post/{category name}/{title name}/{final title name}.md Write post After you create your new post, some field in front matter you need to finish.\ndescription: Outline of your post. slug: Last path of url when your open the past in browser. image: The head image of your post, at the same position with index.md of you post. tags: Same name rule with category. You also need to add the source of your image at the end of the post.\nPublish post Publish on github pages Using github pages to publish you post is awesome, there are some thing you need to do.\nCreate two repositories: One private for your blog site created by hugo, another public for your github pages. You can create a workflow using Github Action on your private blog repository, my gh-pages.yml is below. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 name: github pages on: push: branches: - master workflow_dispatch: jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: latest extended: true - name: Build Web run: hugo --minify - name: Deploy Web uses: peaceiris/actions-gh-pages@v3 with: PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }} EXTERNAL_REPOSITORY: loph3xertoi/loph3xertoi.github.io PUBLISH_BRANCH: master PUBLISH_DIR: ./public commit_message: ${{ github.event.head_commit.message }} Commit your post You can publish your post when you finish it, you can easily publish your post with the help of git and github. Something you need to do:\nUsing git to conduct you blog site, create two branches: master and dev, you can create some new posts in branch dev and merge to master and push your changes in master branch.\n1 2 3 4 5 6 7 8 git checkout dev # Change your current branch to dev. # Do some changes, add new post or modify existed post. git add . git commit -m\u0026#39;Some description.\u0026#39; git checkout master git merge dev git push # Make sure you have run \u0026#39;git push --set-upstream origin master:master\u0026#39; git checkout dev After you push your changes to github, post will be update automatically as Github Action.\nUpdate post Same as publish post above, you don\u0026rsquo;t need to update the lastmod field in front matter, it will be updated automatically, my .vimrc setting is below:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026#34; Define some autocmd for hugo, when modify post(*.md) in ~/Repo/MyBlog/content/post, \u0026#34; update(insert lastmod field if haven\u0026#39;t) lastmod automatically. fun LastMod() let l:frontmatter_start = search(\u0026#34;---\u0026#34;) let l:frontmatter_end = search(\u0026#34;---\u0026#34;) let l:max_frontmatter_bord = max([l:frontmatter_start, l:frontmatter_end]) let l:date_field = search(\u0026#34;^date\u0026#34;) let l:lastmod_field = search(\u0026#34;^lastmod\u0026#34;) \u0026#34; lastmod field found in front matter. if l:lastmod_field \u0026amp;\u0026amp; l:lastmod_field \u0026lt; l:max_frontmatter_bord exe \u0026#34;1,\u0026#34; . l:lastmod_field . \u0026#34;g/lastmod: /s/lastmod: .*/lastmod: \u0026#34; . strftime(\u0026#34;%FT%T%z\u0026#34;) else let l:lastmod_string = \u0026#34;lastmod: \u0026#34; . strftime(\u0026#34;%FT%T%z\u0026#34;) exe l:date_field . \u0026#34;normal! o\u0026#34; . l:lastmod_string . \u0026#34;\\\u0026lt;Esc\u0026gt;\u0026#34; endif endfun augroup myhugocmd autocmd myhugocmd BufWrite ~/Repo/MyBlog/content/post/*.md ks|call LastMod()|\u0026#39;s ","date":"2022-12-09T20:55:53+08:00","image":"https://www.loph.tk/p/workflow-post/hugo_huc6ee3c054c99eb3320a65e63aab5c167_111155_120x120_fill_box_smart1_3.png","permalink":"https://www.loph.tk/p/workflow-post/","title":"Workflow Post"},{"content":"Terms Node Degree: For a given node, its number of children. Degree of tree: The degree of a tree is the maximum degree of a node in the tree. Properties The maximum number of nodes in i th level is $2^{i-1}$. The maximum number of nodes of tree with k depth is $2^k-1$. The number of leaves of a binary tree is $n_0$, the number of nodes with 2 degree is $n_2$, then $n_0$ = $n_2$ + 1. The depth of a complete binary tree with n nodes is $\\lfloor$ $log_2{n}$ $\\rfloor$ + 1. For a complete binary tree with n nodes, its depth is $\\lfloor$ $log_2{n}$ $\\rfloor$ + 1, we name every nodes in order by level from left to right, for every node i: If i = 1, the node is root of the tree; else its parent node is $\\lfloor$ i/2 $\\rfloor$. If 2i \u0026gt; n, the node is a leaf, with no left child; otherwise, its left child\u0026rsquo;s order is 2i. If 2i + 1 \u0026gt; n, the node hasn\u0026rsquo;t right child; otherwise, the order of its right child is 2i + 1. For a binary tree with n nodes represented by bi-linked list, every node has two pointer field, totally 2n pointer field, non-used pointer field is n + 1. Traversal N represent current node, L represent its LEFT subtree, R represent its RIGHT subtree.\nPre-order(NLR): Visit current node, recursively visit its left subtree and right subtree, scan the tree up to down totally. In-order(LNR): Recursively visit its left subtree, current node and its right subtree, scan the tree left to right totally. Post-order(LRN): Recursively visit its left subtree, its right subtree and the current node, scan the tree down to up totally. Conversion between Tree and Binary Tree Use the bi-link list, we can uniform the tree and binary tree.\nFor any node in a binary tree, its left child represents its first child in a tree, respectively. Its right child represents the sibling of this node in the original tree. In other words, the right branch represents its sibling, in same level and the right branch represents its depth of the original tree.\ni.e.\n1 2 3 4 5 6 7 8 9 10 11 a a /|\\ -\u0026gt; / b c d \u0026lt;- b /|\\ / \\ / \\ efg h i e c \\ \\ f d \\ / g h \\ i Photo by Gauri wankhade on Medium\n","date":"2022-12-07T00:00:00Z","image":"https://www.loph.tk/p/binary-tree/cover_hu87b1fd83ec397c33162f3cd23421f822_32617_120x120_fill_q75_box_smart1.jpg","permalink":"https://www.loph.tk/p/binary-tree/","title":"Binary Tree"}]